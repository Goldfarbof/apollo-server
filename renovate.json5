{
  "extends": [
    "apollo-open-source",
    "group:graphqlcodegeneratorMonorepo",
    "group:graphql-toolsMonorepo",
  ],
  "schedule": null,
  // Disable circleci manager; see apollographql/federation's renovate file for details.
  "enabledManagers": ["npm"],
  "dependencyDashboard": true,
  // It seems like a nice idea to let Renovate use GitHub's native "automerge" since PRs
  // can get merged between Renovate runs. The downsides are:
  // - Renovate doesn't seem to set up the automerges to use squash-and-merge (this is
  //   likely going to be fixed, see eg https://github.com/renovatebot/renovate/issues/12290)
  // - When Renovate does the merge itself, it does its best to ensure that the PR is fully
  //   rebased on main so that the CI that ran is based on main rather than a possibly slightly
  //   old branch point. GH auto-merge doesn't have that property so it's a bit more likely that
  //   a deps update could break the build if there are recent related changes.
  platformAutomerge: false,
  "packageRules": [
    // Bunch up all non-major dependencies into a single PR.  In the common case
    // where the upgrades apply cleanly, this causes less noise and is resolved faster
    // than starting a bunch of upgrades in parallel for what may turn out to be
    // a suite of related packages all released at once. (This is above the docs sections
    // so that the docs groupNames defined in renovate-config-apollo-docs take precedence.)
    {
      "groupName": "all non-major dependencies",
      "matchUpdateTypes": ["patch", "minor"],
      "groupSlug": "all-minor-patch",
    },
    {
      "matchPackageNames": ["@types/node"],
      "allowedVersions": "12.x"
    },
    // make-fetch-happen is used by the op reg plugin, which uses a cache API
    // that is removed in v9.
    {
      "matchPackageNames": ["make-fetch-happen"],
      "allowedVersions": "8.x"
    },
    // node-fetch v3 only ships as ESM. We currently build to CommonJS and even
    // if we start publishing as ESM (#5627) we're not going to go ESM-only
    // for a while. (Plus it requires Node v12.20 and we technically support
    // v12.0.) So let's stay on v2. (Perhaps we could swap to undici instead
    // if this pin gets to be a problem.)
    {
      "matchPackageNames": ["node-fetch", "@types/node-fetch"],
      "allowedVersions": "2.x"
    },
    // A particular upgrade of this package is failing tests; move it to its
    // own group so that the rest of the upgrades can merge.
    {
      "matchPackageNames": ["@vendia/serverless-express"],
      "groupName": "@vendia/serverless-express",
    },
    /*
      Docs-related Renovate rules

      These ensure that the `docs/` folder, which is its own application with
      its own dependencies which lives inside this repository, plays by its
      own Renovate rules.  Those rules are defined within the external (npm)
      package called `renovate-config-apollo-docs` (defined here only by
      the `apollo-docs` suffix).
    */
    {
      "matchPaths": [
        "docs/package.json"
      ],
      "extends": [
        "apollo-docs"
      ],
      // We need to tell Renovate to check the branches for each major version
      // of Apollo Server.  "Past" major versions should be added here!
      "baseBranches": [
        "main",
        "version-2"
      ],
    },
    // The current Apollo Gatsby theme does not support a version of Gatsby
    // that supports React 17.
    {
      "matchPaths": [
        "docs/package.json"
      ],
      "matchPackageNames": ["react", "react-dom"],
      "allowedVersions": "16.x",
    },
    {
      matchPackagePatterns: [""],
      // Override this value set in apollo-open-source and apollo-docs back to the default.
      // It's nice to be able to see PRs for everything in the Dependency Dashboard.
      prCreation: "immediate",
    },
  ]
}
